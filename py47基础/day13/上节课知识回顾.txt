概念
类和对象
类(抽象描述)和对象(具体存在)
类：对一类事物的共性描述(功能/行为)
对象：类的具体化存在。

类和对象：类提供了什么功能？请问这个对象有没有这个功能?
沙县小吃 - 对象(你家楼下门口真实存在的那家沙县小吃店子)
男/女朋友 -  你身边的具体存在对象。
黄种人/白种人/黑种人 -
狗/手机/工作 -
小孩  -  名字/性别/体重
飞机  -  真实的飞机 - 功能出行+容量/航空公司/型号/航线

现实世界里面，类和对象都是已经有了的。

为什么要写成类？ --- 解决问题。
定义类、在类的基础上创建对象。
定义类：属性+方法
class 类名:

    属性名 = 值   # 类属性
    # 方法 - 功能
    def 方法名(self):
        pass
    # 方法 - 功能
    def 方法名(self):
        pass

self：代表对象本身。
# 创建对象  实例化对象。对象拥有类里面的所有方法。
变量名(对象名) = 类名()
# 对象调用它的方法 - 执行函数
对象名.方法名()

可以创建多个对象。每个对象之间是相互独立的。

属性类别：实例属性：self.属性名 = 值
                定义实例属性：方法内部(第一个参数为self的方法)。
                要求：实例的所有属性，都要在__init__方法中定义。
                因为__init__是创建对象时，自动调用的。一旦创建对象，对象就拥有属性了。
                修改实例属性的值：
                    在实例方法当中，通过self.实例属性 = 值去修改。
        实例属性在哪里定义？在哪里修改？

        类属性：类名下面，属性名 = 值 (所有对象都是一样的。不会因对象不同而改变)
              调用：类名.类属性名

关于__init__方法：
1、什么时候需要在类当中实现__init__方法
   1）有初始化工作、准备工作
   2）类中其它的方法都要访问的公共变量，则设置为实例属性。
没有return

1、什么时候需要设置实例属性？
   多个实例方法都需要访问同一变量/属性时，则在初始化当中设置为实例属性。

实例方法(属性)：第一参数为self的方法。
         调用:只有对象可以调用。



=====  以下2个，知道有这个语法就行了。看到了认识就行 =========
类方法(属性)：方法名上有@classmethod；方法参数第一个为cls
           调用：类名就可以调用。实例也是可以调用的。

静态方法: 方法名上有@staticmethod; 没有任何固定的参数。
         普通的函数，搬到类里面。跟self和cls都没有啥关系。

1、类属性：直接在类定义中，属性名 = 值
2、类方法： @classmethod    参数为cls。
          类方法可访问类属性，不能访问实例属性。
          不是实例的特性，所有实例的共同特征。
          实例/类均可访问。



