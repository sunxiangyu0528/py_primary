python自带的日志模块：logging
python第三方库：loguru

日志：追溯问题、定位问题。
1、你希望在代码的哪些地方，输出日志？这些地方是哪些日志级别？
2、你希望输出在哪里？文件？控制台？
3、你希望从日志里看到什么？日志的呈现格式。


1、日志级别：
    Critical/Fatal(致命) > Error(报错) > Warning(警告) > Info(信息) > Debug(调试)
    如果指定收集Warning及以上的日志级别，那么会输出Waring\Error\Critical


2、首先，先在业务逻辑代码当中，写入日志相关的代码。
    # logging模块，默认会收集warning及以上级别的日志输出。
    # logging.info("我是py43期")
    # logging.debug("我是debug")
    # logging.warning("友情提示，警告")
    # logging.error("我出错啦")
    # logging.critical("出大事了")
    # logging.exception("抛异常的情况下才使用，也是error级别，但是error级别的报错，输出详细的traceback报错信息")

3、谁来决定【收集】中哪些级别的日志，并输出到文件/控制台？
   代码相应的逻辑位置，写上收集日志的代码。
   埋在业务逻辑代码当中。

   收集时，可以明确指定哪些级别的日志，会被收集到，并输出出来。

loguru第三方库使用说明
安装：pip install loguru
使用：
1、导入：from loguru import logger
2、写入文件：
   logger.add(文件路径)
3、设置日志文件的大小、个数
   大小参数：rotation
   个数参数：retention
   压缩参数：compression   # 将日志文件压缩留存。参数为压缩包后缀：zip、tar、gz等

   logger.add(文件路径, rotation='100 MB', retention=10,compression="zip")
   logger.add(文件路径, rotation='00:00')  每天晚上12点重新生成一个日志文件
   logger.add(文件路径, rotation='1 week')
   logger.add(文件路径, rotation='10 days')


4、异常追溯
当异常和错误不可避免时，最好的方式就是让我们知道程序到底是哪里出了错，
或者是因为什么导致错误，这样才能更好地让开发人员及时应对并解决。
loguru集成了一个名为better_exceptions 的库，不仅能够将异常和错误记录，并且还能对异常进行追溯
logger.add中的2个参数： backtrace=True, diagnose=True

学习文章：https://blog.csdn.net/weixin_45463877/article/details/110085488
官方文档：https://pypi.org/project/loguru/
"""

使用步骤：
第一步：
from loguru import logger
# 主入口文件当中，设置日志写入日志文件 。
logger.add("mycase.log",
           rotation='100 MB',
           retention=10,
           compression="zip",
           encoding="utf-8")
第二步：
    想输出日志的py文件当中：
    from loguru import logger
    在需要输出的地方，调用logger.info/warning/error/debug.....
